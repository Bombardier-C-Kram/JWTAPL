:Namespace JWTAPL
    ∇ digest←key hmacsha256 data;Init;Update;digest;ctx;Digest;dll
      ⍝ From Bjørn and Brian.
      ⍝ Uses conga ssl shared library.
      ⍝ ctx is 3×112
      dll←1⊃⊃1 ⎕NPARTS⊃⎕NINFO⍠1⊢'conga??ssl*.*',⍨⊃⊃1 ⎕NPARTS 2 ⎕NQ #'GetCommandLineArgs'
      'Init'⎕NA dll,'|nettle_hmac_sha256_set_key >I1[336] U8 <T1[]'
      'Update'⎕NA dll,'|nettle_hmac_sha256_update =I1[336] U8 <T1[]'
      'Digest'⎕NA dll,'|nettle_hmac_sha256_digest =I1[336] U8 >I1[32]'

      ctx←Init(336)(≢key)key
      ctx←Update ctx(⍴data)data
      ctx digest←Digest ctx 32 32 
    ∇
    
    base64←{⎕IO ⎕ML←0 1             ⍝ Base64 encoding and decoding as used in MIME.
        ⍝ From Dyalog DFNS
        chars←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
        bits←{,⍉(⍺⍴2)⊤⍵}                   ⍝ encode each element of ⍵ in ⍺ bits,
                                       ⍝   and catenate them all together
        part←{((⍴⍵)⍴⍺↑1)⊂⍵}                ⍝ partition ⍵ into chunks of length ⍺

        0=2|⎕DR ⍵:2∘⊥∘(8∘↑)¨8 part{(-8|⍴⍵)↓⍵}6 bits{(⍵≠64)/⍵}chars⍳⍵
                                       ⍝ decode a string into octets

        four←{                             ⍝ use 4 characters to encode either
            8=⍴⍵:'=='∇ ⍵,0 0 0 0           ⍝   1,
            16=⍴⍵:'='∇ ⍵,0 0               ⍝   2
            chars[2∘⊥¨6 part ⍵],⍺          ⍝   or 3 octets of input
        }
        cats←⊃∘(,/)∘((⊂'')∘,)              ⍝ catenate zero or more strings
        cats''∘four¨24 part 8 bits ⍵
    }
    
    ∇ r←secret Encode(h p);eh;ep;gsig 
      ⍝ Encode needs a (optional secret (char vector)), and a header and a payload namespace
      :If 0={(≢⍵)-(⊂'alg')⍳⍨⍵}h.⎕NL-⍳9
        ⍝ Header MUST contain an algorithm. Can even be 'none', but must say that  
        ⎕SIGNAL⊂('EN' 510)('Message' 'Algorithm Not Provided')
      :EndIf
      (eh ep)←~∘'='¨base64¨⎕UCS¨⎕JSON¨h p ⍝ Encode header and payload

      :If (0<≢secret)∧(h.alg≡'HS256') ⍝ Can support more algorithms in the future
        gsig←secret hmacsha256 eh,'.',ep
        gsig←~∘'='base64 gsig
      :ElseIf (h.alg≡'none')
        ⍝ This an unsigned token
        gsig←''
      :Else
        ⍝ Algorithm not supported.
        ⎕SIGNAL⊂('EN' 511)('Message' 'Algorithm Not Supported')
      :EndIf

      :If gsig≢''
        r←∊eh,'.',ep,'.'gsig ⍝ header.payload.signature
      :Else
        r←eh,'.',ep ⍝ header.payload
      :EndIf
    ∇
    
    
    ∇ r←secret Decode tkn;h;p;alg;eh;ep;d;s;gsig
      tkn←'.'(≠⊆⊢)tkn
      :If 3≠≢tkn
        (h p)←⎕JSON¨⎕UCS¨base64¨tkn ⍝ This is an unencrypted token, so it has no signature.
        r←h p 0 
        :Return
      :EndIf

      (eh ep s)←tkn
      s←(~∘'=')s
      (h p)←⎕JSON¨⎕UCS¨base64¨eh ep
      alg←h.alg
      (eh ep)←~∘'='¨eh ep

      :If alg≡'HS256'
        gsig←secret hmacsha256 eh,'.',ep
        gsig←~∘'='base64 gsig
      :Else
        gsig←'' ⍝ We don't support this algorithm, so the signature does not exist
        ⍝ TODO: Maybe specify that this might be a valid signature, but we don't know?
        ⍝ I don't see why someone would have a JWT that does not use HS256, but can't assume...
      :EndIf

      r←h p (gsig≡s) ⍝ Header Payload and IsValidSignature
    ∇
	
:EndNamespace
